#!/bin/bash

# Copyright 2015 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Notes:
#  - Please install "jq" package before using this driver.
usage() {
	err "Invalid usage. Usage: "
	err "\t$0 init"
	err "\t$0 attach <json params>"
	err "\t$0 detach <mount device>"
	err "\t$0 mount <mount dir> <mount device> <json params>"
	err "\t$0 unmount <mount dir>"
	exit 1
}

err() {
	echo -ne $* 1>&2
}

log() {
	echo -ne $* >&1
}

ismounted() {
	MOUNT=`findmnt -n "${MNTPATH}" 2>/dev/null | cut -d' ' -f1`
	if [ "${MOUNT}" == "${MNTPATH}" ]; then
		echo "1"
	else
		echo "0"
	fi
}

attach() {
	HOSTPATH=$(echo $1 | jq -r '.hostPath')
	POSTFIX=$(echo $1 | jq -r '."kubernetes.io/item/podName"')
	if [ "x${POSTFIX}" == "xnull" ]; then
		err "{ \"status\": \"Failure\", \"message\": \"Failed to determine 'kubernetes.io/item/podName'\"}"
		exit 1
	fi

	MNT="${HOSTPATH}/${POSTFIX}"

	if [ ! -d "${MNT}" ]; then
		mkdir -p "${MNT}" >/dev/null 2>&1
		if [ $? -ne 0 ]; then
			err "{ \"status\": \"Failure\", \"message\": \"Failed to create ${MNT} directory\"}"
			exit 1
		fi
	fi
	log "{\"status\": \"Success\", \"device\":\"${HOSTPATH}\"}"
	exit 0
}

detach() {
	log "{\"status\": \"Success\"}"
	exit 0
}

domount() {
	MNTPATH=$1
	HOSTPATH=$2

	POSTFIX=$(echo $3 | jq -r '."kubernetes.io/item/podName"')
	if [ "x${POSTFIX}" == "xnull" ]; then
		err "{ \"status\": \"Failure\", \"message\": \"Failed to determine 'kubernetes.io/item/podName'\"}"
		exit 1
	fi

	MNT="${HOSTPATH}/${POSTFIX}"

	if [ ! -d "${MNT}" ]; then
		err "{\"status\": \"Failure\", \"message\": \"${HOSTPATH} does not exist\"}"
		exit 1
	fi

	if [ $(ismounted) -eq 1 ] ; then
		log "{\"status\": \"Success\"}"
		exit 0
	fi

	mkdir -p "${MNTPATH}" &> /dev/null

	mount --bind "${MNT}" "${MNTPATH}" &> /dev/null
	if [ $? -ne 0 ]; then
		err "{ \"status\": \"Failure\", \"message\": \"Failed to mount directory ${MNT} at ${MNTPATH}\"}"
		exit 1
	fi
	log "{\"status\": \"Success\"}"
	exit 0
}

unmount() {
	MNTPATH=$1
	if [ $(ismounted) -eq 0 ] ; then
		log "{\"status\": \"Success\"}"
		exit 0
	fi

	umount "${MNTPATH}" &> /dev/null
	if [ $? -ne 0 ]; then
		err "{ \"status\": \"Failed\", \"message\": \"Failed to unmount directory at ${MNTPATH}\"}"
		exit 1
	fi
	rmdir "${MNTPATH}" &> /dev/null

	log "{\"status\": \"Success\"}"
	exit 0
}

op=$1

if [ "$op" = "init" ]; then
	log "{\"status\": \"Success\"}"
	exit 0
fi

if [ $# -lt 2 ]; then
	usage
fi

shift

case "$op" in
	attach)
		attach $*
		;;
	detach)
		detach $*
		;;
	mount)
		domount $*
		;;
	unmount)
		unmount $*
		;;
	*)
		usage
esac

exit 1
